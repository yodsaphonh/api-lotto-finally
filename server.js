const express = require("express");
const mysql = require("mysql2/promise");
const cors = require("cors");
const os = require("os");

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// connect db
const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: Number(process.env.DB_PORT) || 4016,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  keepAliveInitialDelay: 10000,
  enableKeepAlive: true,
  connectTimeout: 20000,
  ssl: { rejectUnauthorized: true, servername: process.env.DB_HOST }
});
// test route
app.get("/", (req, res) => {
  res.send("API is running üöÄ");
});

// DELETE /users/:id  ‚Äî ‡∏•‡∏ö orders ‡∏Ç‡∏≠‡∏á user ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö user (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin)
app.delete("/users/:id", async (req, res) => {
  const uid = Number(req.params.id);
  if (!Number.isInteger(uid) || uid <= 0) {
    return res.status(400).json({ error: "invalid user_id" });
  }

  let conn;
  try {
    conn = await db.getConnection();
    await conn.beginTransaction();

    // 1) ‡∏•‡∏ö orders ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á user ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô FK ‡∏ï‡∏¥‡∏î)
    const [delOrders] = await conn.query(
      "DELETE FROM orders WHERE user_id = ?",
      [uid]
    );

    // 2) ‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö‡∏à‡∏≤‡∏Å users ‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö admin
    const [delUser] = await conn.query(
      "DELETE FROM users WHERE user_id = ? AND LOWER(role) <> 'admin'",
      [uid]
    );

    if (delUser.affectedRows === 0) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô admin ‚Üí ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á
      await conn.rollback();
      return res.status(404).json({
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô admin (‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö)",
        deleted: { orders: delOrders.affectedRows || 0, users: 0 }
      });
    }

    await conn.commit();
    return res.json({
      message: "‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      deleted: {
        orders: delOrders.affectedRows || 0,
        users: delUser.affectedRows || 0
      }
    });
  } catch (err) {
    if (conn) { try { await conn.rollback(); } catch {} }
    return res.status(500).json({ error: err.message });
  } finally {
    if (conn) conn.release();
  }
});


// health check DB
app.get("/db-check", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT NOW() now, DATABASE() db");
    res.json(rows[0]);
  } catch (e) {
    res.status(500).json({ error: e.code || e.message });
  }
});

//test select all users
app.get("/users", async (req, res) => {
  try {
    const [results] = await db.query("SELECT * FROM users");
    res.json(results);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1, 2, 3, ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß, ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß)
app.get("/reward/latest", async (req, res) => {
  try {
    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const rewardId = latest[0]?.rid;

    if (!rewardId) {
      return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // 2) ‡∏î‡∏∂‡∏á reward_data ‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [rows] = await db.query(
      "SELECT reward_id, CAST(reward_data AS CHAR) AS reward_data, date FROM reward WHERE reward_id = ?",
      [rewardId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö reward_data" });
    }

    let rewardData;
    try {
      rewardData = JSON.parse(rows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format invalid" });
    }

    // 3) ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ tier 1-5
    const filtered = rewardData
      .filter(r => [1, 2, 3, 4, 5].includes(r.tier))
      .map(r => ({
        name: r.name,
        tier: r.tier,
        amount: r.amount,
        winning: r.winning
      }));

    // 4) ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    res.json({
      message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      reward_id: rows[0].reward_id,
      date: rows[0].date,
      rewards: filtered
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


//==================================================================
//                        ADMIN ROUTE
//==================================================================
// insert lotto (‡∏ó‡∏µ‡πà‡∏•‡∏∞ 1 ‡πÉ‡∏ö)
app.post("/lotto", async (req, res) => {
  const { id, number } = req.body;
  const status = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠";
  const price = 80;

  if (!id || !number) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id ‡πÅ‡∏•‡∏∞ number" });
  }

  try {
    // 0) ‡∏ï‡∏£‡∏ß‡∏à role ‡∏Ç‡∏≠‡∏á user
    const [users] = await db.query("SELECT role FROM users WHERE user_id = ?", [id]);
    if (users.length === 0) {
      return res.status(404).json({ error: "User not found" });
    }
    if (String(users[0].role).toLowerCase() !== "admin") {
      return res.status(403).json({ error: "Only admin can insert lotto" });
    }

    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const reward_id = latest[0]?.rid;
    if (!reward_id) {
      return res.status(400).json({ message: "No reward found (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î)" });
    }

    // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [rewardRows] = await db.query(
      "SELECT CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [reward_id]
    );

    if (!rewardRows.length) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• reward" });
    }

    let rewardData;
    try {
      rewardData = JSON.parse(rewardRows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format invalid" });
    }

    const alreadyDrawn = rewardData.some(
      (r) => r.winning !== null && r.winning !== undefined && String(r.winning).trim() !== ""
    );

    if (alreadyDrawn) {
      return res.status(400).json({ error: "‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ" });
    }

    // 3) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [check] = await db.query(
      "SELECT * FROM lotto WHERE reward_id = ? AND number = ?",
      [reward_id, number]
    );
    if (check.length > 0) {
      return res.status(400).json({ message: "This number already exists in this reward" });
    }

    // 4) Insert ‡πÄ‡∏Ç‡πâ‡∏≤ lotto (‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const [results] = await db.query(
      "INSERT INTO lotto (reward_id, number, price, status) VALUES (?, ?, ?, ?)",
      [reward_id, number, price, status]
    );

    res.json({
      message: "‚úÖ Lotto inserted successfully",
      lotto_id: results.insertId,
      reward_id,
      data: { number, price, status }
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ADMIN: RANDOM LOTTO (‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö - ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
function generateRandomNumber() { // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å
  return String(Math.floor(Math.random() * 1000000)).padStart(6, "0");
}

app.post("/lotto/random", async (req, res) => {
  const { id, randomCount } = req.body;
  const price = 80;
  const lotto_status = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠";

  if (!id) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id" });
  }
  if (!randomCount || randomCount <= 0) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô randomCount > 0" });
  }

  try {
    // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user
    const [users] = await db.query("SELECT role FROM users WHERE user_id = ?", [id]);
    if (users.length === 0) {
      return res.status(404).json({ error: "User not found" });
    }
    if (String(users[0].role).toLowerCase() !== "admin") {
      return res.status(403).json({ error: "Only admin can random lotto" });
    }

    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const reward_id = latest[0]?.rid;
    if (!reward_id) {
      return res.status(400).json({ message: "No reward found (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î)" });
    }

    // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [rewardRows] = await db.query(
      "SELECT CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [reward_id]
    );

    if (!rewardRows.length) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• reward" });
    }

    let rewardData;
    try {
      rewardData = JSON.parse(rewardRows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format invalid" });
    }

    const alreadyDrawn = rewardData.some(
      (r) => r.winning !== null && r.winning !== undefined && String(r.winning).trim() !== ""
    );

    if (alreadyDrawn) {
      return res.status(400).json({ error: "‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ" });
    }

    // 3) ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [existing] = await db.query("SELECT number FROM lotto WHERE reward_id = ?", [reward_id]);
    const existingNumbers = new Set(existing.map((row) => row.number));

    // 4) ‡∏ß‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ insert
    const inserted = [];
    while (inserted.length < randomCount) {
      const num = generateRandomNumber();
      if (!existingNumbers.has(num)) {
        await db.query(
          "INSERT INTO lotto (reward_id, number, price, status) VALUES (?, ?, ?, ?)",
          [reward_id, num, price, lotto_status]
        );
        existingNumbers.add(num);
        inserted.push(num);
      }
    }

    // 5) ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    res.json({
      message: "‚úÖ Random lotto inserted successfully",
      reward_id,
      total: inserted.length,
      numbers: inserted,
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
app.post("/reward/draw", async (req, res) => {
  const { id, statusType: rawStatusType } = req.body;

  if (!id) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id" });
  }

  try {
    // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user
    const [users] = await db.query("SELECT role FROM users WHERE user_id = ?", [id]);
    if (users.length === 0) {
      return res.status(404).json({ error: "User not found" });
    }
    if (String(users[0].role).toLowerCase() !== "admin") {
      return res.status(403).json({ error: "Only admin can draw reward" });
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î statusType
    let statusType = String(rawStatusType || "sold").toLowerCase();
    if (!["sold", "all", "purchased", "‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß"].includes(statusType)) statusType = "sold";
    if (statusType === "purchased" || statusType === "‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß") statusType = "sold";

    const LIMIT = 4;

    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [rows1] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const latestId = rows1?.[0]?.rid;
    if (!latestId) return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á reward" });

    // 2) ‡πÇ‡∏´‡∏•‡∏î reward_data
    const [rows2] = await db.query(
      "SELECT reward_id, CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [latestId]
    );
    if (!rows2?.length) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" });

    const raw = rows2[0].reward_data;
    let data;
    try {
      if (raw == null) data = [];
      else if (typeof raw === "string") data = JSON.parse(raw);
      else if (Buffer.isBuffer(raw)) data = JSON.parse(raw.toString());
      else if (typeof raw === "object") data = raw;
      else data = [];
    } catch (e) {
      return res.status(500).json({
        error: "reward_data ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        detail: String(e.message),
        sample: String(raw).slice(0, 200),
      });
    }

    // 3) ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const conflicts = (Array.isArray(data) ? data : [])
      .filter((o) => o && typeof o === "object")
      .filter((o) => o.winning !== null && o.winning !== undefined && String(o.winning) !== "")
      .map((o) => ({ tier: o.tier ?? null, winning: o.winning }));

    if (conflicts.length > 0) {
      return res.status(409).json({
        message: "‚ùå ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        reason: "‡∏û‡∏ö winning ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)",
        conflicts,
      });
    }

    // 4) ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡∏≤‡∏° mode)
    const qPick = `
      SELECT DISTINCT number
      FROM lotto
      ${statusType === "sold" ? "WHERE TRIM(status) IN ('‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß','sold')" : ""}
      ORDER BY RAND()
      LIMIT ?
    `;
    const [rows3] = await db.query(qPick, [LIMIT]);
    if (!rows3?.length) {
      return res.status(404).json({
        message: statusType === "sold" ? "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á lotto" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á lotto",
      });
    }

    const picked = rows3.map((r) => String(r.number));
    while (picked.length < 4) picked.push(picked[picked.length - 1] || picked[0]);

    const byTier = new Map();
    data.forEach((obj) => byTier.set(Number(obj?.tier), obj));

    const pick1 = picked[0] || null;
    const pick2 = picked[1] || picked[0] || null;
    const pick3 = picked[2] || picked[1] || picked[0] || null;
    const pick4 = picked[3] || picked[2] || picked[1] || picked[0] || null;

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    if (byTier.get(1)) byTier.get(1).winning = pick1;
    if (byTier.get(2)) byTier.get(2).winning = pick2;
    if (byTier.get(3)) byTier.get(3).winning = pick3;
    if (byTier.get(4)) byTier.get(4).winning = (pick1 || "").slice(-3).padStart(3, "0"); // ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
    if (byTier.get(5)) byTier.get(5).winning = (pick4 || "").slice(-2).padStart(2, "0"); // ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ‡πÉ‡∏ä‡πâ pick4

    // 5) update reward_data
    const payload = JSON.stringify(data);
    await db.query("UPDATE reward SET reward_data = ? WHERE reward_id = ?", [payload, latestId]);

    res.json({
      message: "‚úÖ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      mode: statusType,
      reward_id: latestId,
      picked,
      reward_data: data
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
//==================================================================
//                       END ADMIN ROUTE
//==================================================================





//==================================================================
//                          USER ROUTE
//==================================================================


// select one user
app.get("/users/:id", async (req, res) => {
  const userId = req.params.id;
  try {
    const [results] = await db.query("SELECT * FROM users WHERE user_id = ?", [userId]);
    if (results.length === 0) return res.status(404).json({ message: "User not found" });
    res.json(results[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



// user login
app.post("/users/login", async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: "Email and password are required" });
  }

  try {
    const [results] = await db.query("SELECT * FROM users WHERE email = ? AND password = ?", [email, password]);
    if (results.length === 0) {
      return res.status(401).json({ error: "Invalid email or password" });
    }
    const userData = { ...results[0] };
    delete userData.password;
    res.json({ message: "Login successful", user: userData });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



// register
app.post("/register", async (req, res) => {
  const { email, password, name, role, phone, birthday, wallet } = req.body;
  try {
    const [results] = await db.query(
      "INSERT INTO users (email, password, name, role, phone, birthday, wallet) VALUES (?, ?, ?, ?, ?, ?, ?)",
      [email, password, name, role, phone, birthday, wallet]
    );
    res.json({ message: "‚úÖ User created successfully", id: results.insertId });
  } catch (err) {
    res.status(500).json({ error: "Failed to create user" });
  }
});



// profile

app.get("/profile/:id", async (req, res) => {
  const userId = req.params.id;
  try {
    const [results] = await db.query("SELECT name, birthday, email, phone FROM users WHERE user_id = ?", [userId]);
    if (results.length === 0) return res.status(404).json({ message: "User not found" });
    res.json(results[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
app.post("/deposit/:id", async (req, res) => {
  const userId = req.params.id;
  const { amount } = req.body;

  if (!amount || amount <= 0) {
    return res.status(400).json({ error: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" });
  }

  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï wallet
    const [result] = await db.query(
      "UPDATE users SET wallet = wallet + ? WHERE user_id = ?",
      [amount, userId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
    }

    // ‡∏î‡∏∂‡∏á wallet ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [rows] = await db.query("SELECT user_id, name, wallet FROM users WHERE user_id = ?", [userId]);

    res.json({
      message: "‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: rows[0],
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
app.post("/withdraw/:id", async (req, res) => {
  const userId = req.params.id;
  const { amount } = req.body;

  if (!amount || amount <= 0) {
    return res.status(400).json({ error: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" });
  }

  try {
    // 1) ‡∏î‡∏∂‡∏á wallet ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const [users] = await db.query("SELECT wallet FROM users WHERE user_id = ?", [userId]);
    if (users.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
    }

    const currentWallet = parseFloat(users[0].wallet);
    if (currentWallet < amount) {
      return res.status(400).json({ error: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
    }

    // 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï wallet
    const [result] = await db.query(
      "UPDATE users SET wallet = wallet - ? WHERE user_id = ?",
      [amount, userId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" });
    }

    // 3) ‡∏î‡∏∂‡∏á wallet ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [rows] = await db.query("SELECT user_id, name, wallet FROM users WHERE user_id = ?", [userId]);

    res.json({
      message: "‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: rows[0],
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//my order lotto
app.get("/mylotto/:id", async (req, res) => {
  const userId = req.params.id;

  try {
    const [rows] = await db.query(
      `
      SELECT 
        o.order_id,
        o.date,
        o.status AS order_status,
        l.lotto_id,
        l.number,
        l.price,
        l.status AS lotto_status,
        r.reward_id,
        r.date AS reward_date
      FROM orders o
      JOIN lotto l ON o.lotto_id = l.lotto_id
      JOIN reward r ON o.reward_id = r.reward_id
      WHERE o.user_id = ?
      ORDER BY o.date DESC
      `,
      [userId]
    );

    if (rows.length === 0) {
      return res.json({ message: "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà", orders: [] });
    }

    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      total: rows.length,
      orders: rows,
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//‡πÅ‡∏™‡∏î‡∏á lotto ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡∏≠‡∏ô‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠ lotto
app.get("/lotto", async (req, res) => {
  try {
    // 1) ‡∏´‡∏≤ reward_id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const latestRewardId = latest[0]?.rid;

    if (!latestRewardId) {
      return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // 2) ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [results] = await db.query(
      "SELECT * FROM lotto WHERE reward_id = ?",
      [latestRewardId]
    );

    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      reward_id: latestRewardId,
      total: results.length,
      lotto: results,
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//search lotto
app.post("/search/lotto", async (req, res) => {
  const { number } = req.body;

  if (!number || number.trim() === "") {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
  }

  try {
    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const latestRewardId = latest[0]?.rid;
    if (!latestRewardId) {
      return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // 2) ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠
    const searchPattern = `%${number}%`;
    const [rows] = await db.query(
      `
      SELECT 
        l.lotto_id,
        l.number,
        l.price,
        l.status,
        r.reward_id,
        r.date AS reward_date
      FROM lotto l
      JOIN reward r ON l.reward_id = r.reward_id
      WHERE l.reward_id = ? 
        AND l.status = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠'
        AND l.number LIKE ?
      ORDER BY l.number ASC
      `,
      [latestRewardId, searchPattern]
    );

    if (rows.length === 0) {
      return res.json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", results: [] });
    }

    res.json({
      message: "‡∏û‡∏ö‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà",
      total: rows.length,
      results: rows,
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



// RANDOM ONE LOTTO
app.get("/lotto/randomOne", async (req, res) => {
  try {
    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const latestRewardId = latest[0]?.rid;
    if (!latestRewardId) {
      return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // 2) ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
    const [rows] = await db.query(
      `
      SELECT lotto_id, number, price, status, reward_id
      FROM lotto
      WHERE reward_id = ? AND status = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠'
      ORDER BY RAND()
      LIMIT 1
      `,
      [latestRewardId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ message: "‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    res.json({
      message: "‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      lotto: rows[0]
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



// ‡∏ã‡∏∑‡πâ‡∏≠ lotto
app.post("/orders", async (req, res) => {
  const { user_id, lotto_id } = req.body;

  if (!user_id || !lotto_id) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ user_id ‡πÅ‡∏•‡∏∞ lotto_id" });
  }

  try {
    // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á user
    const [users] = await db.query("SELECT role FROM users WHERE user_id = ?", [user_id]);
    if (users.length === 0) {
      return res.status(404).json({ error: "User not found" });
    }
    if (String(users[0].role).toLowerCase() !== "user") {
      return res.status(403).json({ error: "Only user can buy lotto" });
    }

    // 1) ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [latest] = await db.query("SELECT MAX(reward_id) AS rid FROM reward");
    const reward_id = latest[0]?.rid;
    if (!reward_id) {
      return res.status(400).json({ error: "No reward found (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î)" });
    }

    // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ reward ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [rewardRows] = await db.query(
      "SELECT CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [reward_id]
    );
    if (!rewardRows.length) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• reward" });
    }

    let rewardData = [];
    try {
      rewardData = JSON.parse(rewardRows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format is invalid" });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô reward_data ‡∏°‡∏µ winning ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß
    const alreadyDrawn = rewardData.some(
      (r) => r.winning !== null && r.winning !== undefined && String(r.winning).trim() !== ""
    );
    if (alreadyDrawn) {
      return res.status(400).json({ error: "‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" });
    }

    // 3) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ lotto_id ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠
    const [lotto] = await db.query(
      "SELECT * FROM lotto WHERE lotto_id = ? AND reward_id = ? AND status = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠'",
      [lotto_id, reward_id]
    );
    if (lotto.length === 0) {
      return res.status(400).json({ error: "Lotto not available (‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß)" });
    }

    // 4) update lotto ‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    await db.query("UPDATE lotto SET status = '‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß' WHERE lotto_id = ?", [lotto_id]);

    // 5) insert ‡∏•‡∏á orders
    const [result] = await db.query(
      "INSERT INTO orders (lotto_id, user_id, reward_id, date, status) VALUES (?, ?, ?, CURDATE(), ?)",
      [lotto_id, user_id, reward_id, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"]
    );

    res.json({
      message: "‡∏ã‡∏∑‡πâ‡∏≠ Lotto ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      order_id: result.insertId,
      data: {
        lotto_id,
        reward_id,
        user_id,
        status: "‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß)"
      }
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



// user chack reward
app.get("/orders/check/:order_id", async (req, res) => {
  const { order_id } = req.params;

  try {
    // 1) ‡∏´‡∏≤ order + lotto
    const [orders] = await db.query(
      `SELECT o.order_id, o.user_id, o.lotto_id, l.number, l.reward_id
       FROM orders o
       JOIN lotto l ON o.lotto_id = l.lotto_id
       WHERE o.order_id = ?`,
      [order_id]
    );
    if (!orders.length) {
      return res.status(404).json({ error: "Order not found" });
    }

    const order = orders[0];
    const lottoNumber = String(order.number);
    const reward_id = order.reward_id;

    // 2) ‡∏î‡∏∂‡∏á reward_data ‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ
    const [rewardRows] = await db.query(
      "SELECT CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [reward_id]
    );
    if (!rewardRows.length) {
      return res.status(404).json({ error: "Reward not found" });
    }

    let rewardData = [];
    try {
      rewardData = JSON.parse(rewardRows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format invalid" });
    }

    // 3) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (winning ‡∏¢‡∏±‡∏á null) ‚Üí ‡∏´‡∏¢‡∏∏‡∏î
    const isDrawn = rewardData.some(
      (r) => r.winning !== null && r.winning !== undefined && String(r.winning).trim() !== ""
    );
    if (!isDrawn) {
      return res.json({ message: "‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", order_id });
    }

    // 4) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let result = { win: false, tier: null, prize: 0 };

    for (const r of rewardData) {
      if (!r.winning) continue;
      const winNum = String(r.winning);

      if (r.tier === 1 || r.tier === 2 || r.tier === 3) {
        // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á 6 ‡∏´‡∏•‡∏±‡∏Å
        if (lottoNumber === winNum) {
          result = { win: true, tier: r.tier, prize: r.amount };
          break;
        }
      } else if (r.tier === 4) {
        // ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
        if (lottoNumber.slice(-3) === winNum) {
          result = { win: true, tier: r.tier, prize: r.amount };
          break;
        }
      } else if (r.tier === 5) {
        // ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
        if (lottoNumber.slice(-2) === winNum) {
          result = { win: true, tier: r.tier, prize: r.amount };
          break;
        }
      }
    }

    // 5) ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    if (result.win) {
      res.json({
        message: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
        order_id,
        lottoNumber,
        tier: result.tier,
        prize: result.prize
      });
    } else {
      res.json({
        message: "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
        order_id,
        lottoNumber
      });
    }
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
app.post("/orders/redeem", async (req, res) => {
  const { order_id } = req.body;

  try {
    // 1) ‡∏´‡∏≤ order + lotto
    const [orders] = await db.query(
      `SELECT o.order_id, o.user_id, o.lotto_id, o.status, l.number, l.reward_id, u.wallet
       FROM orders o
       JOIN lotto l ON o.lotto_id = l.lotto_id
       JOIN users u ON o.user_id = u.user_id
       WHERE o.order_id = ?`,
      [order_id]
    );
    if (!orders.length) {
      return res.status(404).json({ error: "Order not found" });
    }

    const order = orders[0];
    const lottoNumber = String(order.number);
    const reward_id = order.reward_id;

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    if (order.status === "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß") {
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // 2) ‡∏î‡∏∂‡∏á reward_data ‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ
    const [rewardRows] = await db.query(
      "SELECT CAST(reward_data AS CHAR) AS reward_data FROM reward WHERE reward_id = ?",
      [reward_id]
    );
    if (!rewardRows.length) {
      return res.status(404).json({ error: "Reward not found" });
    }

    let rewardData = [];
    try {
      rewardData = JSON.parse(rewardRows[0].reward_data);
    } catch (err) {
      return res.status(500).json({ error: "reward_data format invalid" });
    }

    // 3) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let prize = 0;
    let tier = null;

    for (const r of rewardData) {
      if (!r.winning) continue;
      const winNum = String(r.winning);

      if ([1, 2, 3].includes(r.tier)) {
        if (lottoNumber === winNum) {
          prize = r.amount;
          tier = r.tier;
          break;
        }
      } else if (r.tier === 4) {
        if (lottoNumber.slice(-3) === winNum) {
          prize = r.amount;
          tier = r.tier;
          break;
        }
      } else if (r.tier === 5) {
        if (lottoNumber.slice(-2) === winNum) {
          prize = r.amount;
          tier = r.tier;
          break;
        }
      }
    }

    if (prize <= 0) {
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" });
    }

    // 4) update wallet
    const newWallet = parseFloat(order.wallet) + prize;
    await db.query("UPDATE users SET wallet = ? WHERE user_id = ?", [newWallet, order.user_id]);

    // 5) update order ‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß"
    await db.query("UPDATE orders SET status = '‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß' WHERE order_id = ?", [order_id]);

    res.json({
      message: "üéâ ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      order_id,
      lottoNumber,
      tier,
      prize,
      newWallet
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



//‡∏Ç‡∏∂‡πâ‡∏ô‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
app.post("/reward/reset", async (req, res) => {
  const { id } = req.body;

  if (!id) {
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ user id" });
  }

  let conn;
  try {
    // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
    const [users] = await db.query(
      "SELECT role FROM users WHERE user_id = ?",
      [id]
    );
    if (!users.length) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }
    if (String(users[0].role).toLowerCase() !== "admin") {
      return res.status(403).json({ error: "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ" });
    }

    // ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ô‡πÅ‡∏ã‡∏Å‡∏ä‡∏±‡∏ô
    conn = await db.getConnection();
    await conn.beginTransaction();

    // 1) ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô orders
    const [delOrders] = await conn.query("DELETE FROM orders");

    // 2) ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô lotto
    const [delLotto] = await conn.query("DELETE FROM lotto");

    // 3) ‡∏•‡∏ö users ‡∏ó‡∏µ‡πà role = 'user' ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
    const [delUsers] = await conn.query(
      "DELETE FROM users WHERE LOWER(role) = 'user'"
    );

    // 4) template reward_data
    const template = [
      { name: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1", tier: 1, amount: 6000000, winning: null },
      { name: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2", tier: 2, amount: 200000, winning: null },
      { name: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3", tier: 3, amount: 80000, winning: null },
      { name: "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß", tier: 4, amount: 4000, winning: null },
      { name: "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß", tier: 5, amount: 2000, winning: null }
    ];

    // 5) ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï YYYY-MM-DD)
    let newDate = new Date();
    newDate.setHours(0, 0, 0, 0);
    let dateStr = newDate.toISOString().split("T")[0];

    // 6) ‡∏Å‡∏±‡∏ô date ‡∏ã‡πâ‡∏≥
    let isDuplicate = true;
    while (isDuplicate) {
      const [check] = await conn.query("SELECT 1 FROM reward WHERE date = ?", [dateStr]);
      if (check.length > 0) {
        newDate.setDate(newDate.getDate() + 1);
        dateStr = newDate.toISOString().split("T")[0];
      } else {
        isDuplicate = false;
      }
    }

    // 7) insert ‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
    const [result] = await conn.query(
      "INSERT INTO reward (reward_data, date) VALUES (?, ?)",
      [JSON.stringify(template), dateStr]
    );

    await conn.commit();

    res.json({
      message: "‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡πâ‡∏≤‡∏á orders, lotto ‡πÅ‡∏•‡∏∞‡∏•‡∏ö users ‡∏ó‡∏µ‡πà role = 'user')",
      new_reward_id: result.insertId,
      date: dateStr,
      reward_data: template,
      deleted: {
        orders: delOrders.affectedRows || 0,
        lotto: delLotto.affectedRows || 0,
        users_role_user: delUsers.affectedRows || 0
      }
    });
  } catch (err) {
    if (conn) {
      try { await conn.rollback(); } catch {}
    }
    res.status(500).json({ error: err.message });
  } finally {
    if (conn) conn.release();
  }
});






//==================================================================
//                          START SERVER
//==================================================================
// Start
app.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ Server listening on port ${PORT}`);
});

// Global handlers
process.on("unhandledRejection", (r) => console.error("Unhandled Rejection:", r));
process.on("uncaughtException", (e) => { console.error("Uncaught Exception:", e); process.exit(1); });